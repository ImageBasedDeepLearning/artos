#ifndef ARTOS_EXCEPTIONS_H
#define ARTOS_EXCEPTIONS_H

#include <exception>
#include <string>

namespace ARTOS
{

/**
* @brief A generic exception generated by ARTOS.
*/
class Exception
{

public:

    Exception() : m_what() {};
    Exception(const std::string & what) : m_what(what) {};
    virtual ~Exception() {};
    
    virtual const char * what() const { return this->m_what.c_str(); };

protected:

    std::string m_what;

};


/**
* @brief A requested operation is not supported or not implemented by the called class.
*/
class NotSupportedException : public Exception
{

public:

    NotSupportedException() : Exception("The requested operation is not supported.") {};
    NotSupportedException(const std::string & what) : Exception(what) {};

};


/**
* @brief There is no known feature extractor for a given type specifier.
*/
class UnknownFeatureExtractorException : public Exception
{

public:

    UnknownFeatureExtractorException() : Exception("Unknown parameter.") {};
    UnknownFeatureExtractorException(const std::string & type) : Exception("Unknown feature extractor: " + type) {};

};


/**
* @brief An unknown parameter has been specified for a class or an algorithm.
*/
class UnknownParameterException : public Exception
{

public:

    UnknownParameterException() : Exception("Unknown parameter.") {};
    UnknownParameterException(const std::string & what) : Exception(what) {};
    UnknownParameterException(const std::string & clsName, const std::string & paramName)
    : Exception(clsName + " has no parameter called " + paramName + ".") {};

};


/**
* @brief The deserialization of a string or stream has failed due to invalid data.
*/
class DeserializationException : public Exception
{

public:

    DeserializationException() : Exception("The given string or stream could not be deserialized into an object. ") {};
    DeserializationException(const std::string & what) : Exception(what) {};

};


/**
* @brief Tried to combine incompatible types (e.g. models with different numbers of features).
*/
class IncompatibleException : public Exception
{
public:
    using Exception::Exception;
};

}

#endif